-- Booleans

type Bool = * -> * -> *;

True    : Bool                    = λtrue.λfalse.true;
False   : Bool                    = λtrue.λfalse.false;
Not     : Bool -> Bool            = λa.((a False) True);
And     : Bool -> Bool -> Bool    = λa.λb.((a b) False);
Or      : Bool -> Bool -> Bool    = λa.λb.((a True) b);
If      : Bool -> * -> * -> *     = λa.λt.λf.((a t) f);

-- Natural Numbers

type Nat = (* -> *) -> * -> *;

0       : Nat                     = λf.λx.x;
1       : Nat                     = λf.λx.(f x);
2       : Nat                     = λf.λx.(f (f x));
3       : Nat                     = λf.λx.(f (f (f x)));
4       : Nat                     = λf.λx.(f (f (f (f x))));
5       : Nat                     = λf.λx.(f (f (f (f (f x)))));
Succ    : Nat -> Nat              = λn.λf.λx.(f ((n f) x));
Add     : Nat -> Nat -> Nat       = λm.λn.λf.λx.((m f) ((n f) x));
Mul     : Nat -> Nat -> Nat       = λm.λn.λf.λx.((m (n f)) x);
IsZero  : Nat -> Nat              = λn.((n λx.False) True);
Eq      : Nat -> Nat -> Bool      = λm.λn.((And (IsZero ((Add m) n))) (IsZero ((Add n) m)));

 6 : Nat = Succ 5 ;  7 : Nat = Succ 6 ;  8 : Nat = Succ 7 ;  9 : Nat = Succ 8 ; 10 : Nat = Succ 9 ;
11 : Nat = Succ 10; 12 : Nat = Succ 11; 13 : Nat = Succ 12; 14 : Nat = Succ 13; 15 : Nat = Succ 14;
16 : Nat = Succ 15; 17 : Nat = Succ 16; 18 : Nat = Succ 17; 19 : Nat = Succ 18; 20 : Nat = Succ 19;
21 : Nat = Succ 20; 22 : Nat = Succ 21; 23 : Nat = Succ 22; 24 : Nat = Succ 23; 25 : Nat = Succ 24;
26 : Nat = Succ 25; 27 : Nat = Succ 26; 28 : Nat = Succ 27; 29 : Nat = Succ 28; 30 : Nat = Succ 29;

-- Data Structures

Pair = λa.λb.λf.((f a) b);
Fst  = λp.(p True);
Snd  = λp.(p False);

Nil  = Pair True True;
Cons = λh.λt.(Pair False (Pair h t));
Head = λl.(Fst (Snd l));
Tail = λl.(Snd (Snd l));
IsEmpty = λl.(Fst l);

Map = λf.λl.((IsEmpty l) Nil) (Cons (f (Head l)) (Map f (Tail l)));
Fold = λf.λa.λl.((IsEmpty l) a) (f (Head l) (Fold f a (Tail l)));
Range = λm.λn.((Eq m n) (Cons m Nil)) (Cons m (Range (Succ m) n));

-- Standard Library Functions

Pred = λn.((Fst (n λp.(Pair (Snd p) (Succ (Snd p)))) (Pair 0 0)));
Fact = λn.((((If (IsZero n)) 1) ((Mul n) (Fact (Succ (Pred n))))));
Fib  = λn.((If (IsZero n)) 0) (((If ((Eq n 1)) 1) ((Add (Fib (Pred n)) (Fib (Pred (Pred n)))))));
